name: Build and Test

on:
  pull_request:
    branches:
      - '**'

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]
        java-version: [17]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v2
        with:
          java-version: ${{ matrix.java-version }}
          distribution: 'adopt'

      - name: Set script permissions
        run: chmod +x ./backend-libs/filter-generation/build_and_install_backend_libs.sh


      - name: Install backend libraries
        run: ./backend-libs/filter-generation/build_and_install_backend_libs.sh

      - name: Build with Maven (cs-cos-backend)
        run: mvn -B -e package --file cs-cos-backend/pom.xml

      - name: Build with Maven (cs-ses-backend)
        run: mvn -B -e package --file cs-ses-backend/pom.xml

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Build Vue app
        run: |
          cd cs-main-frontend
          npm ci
          npm run build

      - name: Build Angular app
        run: |
          cd tc-main-frontend
          npm ci
          npm run build

      - name: Test Java application (cs-cos-backend)
        run: mvn test --file cs-cos-backend/pom.xml

      - name: Test Java application (cs-qes-backend)
        run: mvn test --file cs-qes-backend/pom.xml

      - name: Test Vue app
        run: |
          cd cs-main-frontend
          npm test

      - name: Test Angular app
        run: |
          cd tc-main-frontend
          npm test

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Start services
        run: |
          cd docker
          docker-compose -f docker-compose-simple.yml up -d

      - name: Test cs-cos-backend
        run: |
          # Add commands to test cs-cos-backend here

      - name: Test cs-qes-backend
        run: |
          # Add commands to test cs-qes-backend here

      - name: Stop services
        run: |
          cd docker
          docker-compose -f docker-compose-simple.yml down

#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      - name: Build and push Docker images
#        run: |
#          docker build -t your-dockerhub-username/cs-cos-backend:latest ./cs-cos-backend
#          docker push your-dockerhub-username/cs-cos-backend:latest
#
#          docker build -t your-dockerhub-username/cs-qes-backend:latest ./cs-qes-backend
#          docker push your-dockerhub-username/cs-qes-backend:latest
#
#          cd cs-main-frontend
#          docker build -t your-dockerhub-username/vue-app:latest .
#          docker push your-dockerhub-username/vue-app:latest
#
#          cd ../tc-main-frontend
#          docker build -t your-dockerhub-username/angular-app:latest .
#          docker push your-dockerhub-username/angular-app:latest

#  deploy_stage:
#    runs-on: ubuntu-latest
#    needs: build  # assuming 'build' is the job that needs to complete before deployment
#    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'stage'
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Deploy to Stage
#        run: ./deploy.sh stage  # assuming 'deploy.sh' is your deployment script
#
#  deploy_prod:
#    runs-on: ubuntu-latest
#    needs: build  # assuming 'build' is the job that needs to complete before deployment
#    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#
#      - name: Deploy to Prod
#        run: ./deploy.sh prod  # assuming 'deploy.sh' is your deployment script